"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provide = void 0;
const provide_js_1 = require("provide-js");
class Provide {
    constructor(config) {
        this.config = config;
        if (config && config.token) {
            this.ident = provide_js_1.Ident.clientFactory(config.token, config.identApiScheme, config.identApiHost);
            this.vault = provide_js_1.Vault.clientFactory(config.token, config.vaultApiScheme, config.vaultApiHost);
        }
        this.rpc = new provide_js_1.RpcClient(config === null || config === void 0 ? void 0 : config.rpcScheme, config === null || config === void 0 ? void 0 : config.rpcEndpoint);
    }
    deploy(sender, bytecode, abi) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_deploy', [sender, bytecode, abi]);
        });
    }
    getLeaf(address, index) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_getLeaf', [address, index]);
        });
    }
    getLeaves(address, indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_getLeaves', [address, indexes]);
        });
    }
    getRoot(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_getRoot', [address]);
        });
    }
    getSiblings(address, leafIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_getSiblings', [address, leafIndex]);
        });
    }
    getTracked() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_getTracked', []);
        });
    }
    insertLeaf(sender, address, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_insertLeaf', [sender, address, value]);
        });
    }
    insertLeaves(sender, address, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_insertLeaves', [sender, address, value]);
        });
    }
    track(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_track', [address]);
        });
    }
    verify(address, root, leaf, siblingPath) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.rpc.call('baseline_verify', [address, root, leaf, siblingPath]);
        });
    }
    broadcast(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rpc.call('eth_sendRawTransaction', [tx]);
        });
    }
    fetchTxReceipt(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rpc.call('eth_getTransactionReceipt', [hash]);
        });
    }
    generateKeypair() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.reject('generateKeypair() not yet implemented');
        });
    }
    rpcExec(method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rpc.call(method, params);
        });
    }
    sign(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rpc.call('eth_signTransaction', [params]);
        });
    }
    createWorkgroup(params) {
        return this.ident.createApplication(params);
    }
    updateWorkgroup(workgroupId, params) {
        return this.ident.updateApplication(workgroupId, params);
    }
    fetchWorkgroups(params) {
        return this.ident.fetchApplications(params);
    }
    fetchWorkgroupDetails(workgroupId) {
        return this.ident.fetchApplicationDetails(workgroupId);
    }
    fetchWorkgroupOrganizations(workgroupId, params) {
        return this.ident.fetchApplicationOrganizations(workgroupId, params);
    }
    createWorkgroupOrganization(workgroupId, params) {
        return this.ident.createApplicationOrganization(workgroupId, params);
    }
    updateWorkgroupOrganization(workgroupId, organizationId, params) {
        return this.ident.updateApplicationOrganization(workgroupId, organizationId, params);
    }
    fetchWorkgroupInvitations(workgroupId, params) {
        return this.ident.fetchApplicationInvitations(workgroupId, params);
    }
    fetchWorkgroupTokens(workgroupId) {
        return this.ident.fetchApplicationTokens(workgroupId);
    }
    fetchWorkgroupUsers(workgroupId, params) {
        return this.ident.fetchApplicationUsers(workgroupId, params);
    }
    createWorkgroupUser(workgroupId, params) {
        return this.ident.createApplicationUser(workgroupId, params);
    }
    updateWorkgroupUser(workgroupId, userId, params) {
        return this.ident.updateApplicationUser(workgroupId, userId, params);
    }
    deleteWorkgroupUser(workgroupId, userId) {
        return this.ident.deleteApplicationUser(workgroupId, userId);
    }
    createOrganization(params) {
        return this.ident.createOrganization(params);
    }
    fetchOrganizations(params) {
        return this.ident.fetchOrganizations(params);
    }
    fetchOrganizationDetails(organizationId) {
        return this.ident.fetchOrganizationDetails(organizationId);
    }
    updateOrganization(organizationId, params) {
        return this.ident.updateOrganization(organizationId, params);
    }
    fetchOrganizationInvitations(organizationId, params) {
        return this.ident.fetchOrganizationInvitations(organizationId, params);
    }
    fetchOrganizationUsers(organizationId, params) {
        return this.ident.fetchOrganizationUsers(organizationId, params);
    }
    inviteOrganizationUser(organizationId, params) {
        return this.ident.createOrganizationUser(organizationId, params);
    }
    createVault(params) {
        return this.vault.createVault(params);
    }
    fetchVaults(params) {
        return this.vault.fetchVaults(params);
    }
    fetchVaultKeys(vaultId, params) {
        return this.vault.fetchVaultKeys(vaultId, params);
    }
    createVaultKey(vaultId, params) {
        return this.vault.createVaultKey(vaultId, params);
    }
    deleteVaultKey(vaultId, keyId) {
        return this.vault.deleteVaultKey(vaultId, keyId);
    }
    encrypt(vaultId, keyId, payload) {
        return this.vault.encrypt(vaultId, keyId, payload);
    }
    decrypt(vaultId, keyId, payload) {
        return this.vault.decrypt(vaultId, keyId, payload);
    }
    signMessage(vaultId, keyId, msg) {
        return this.vault.signMessage(vaultId, keyId, msg);
    }
    verifySignature(vaultId, keyId, msg, sig) {
        return this.vault.verifySignature(vaultId, keyId, msg, sig);
    }
    fetchVaultSecrets(vaultId, params) {
        return this.vault.fetchVaultSecrets(vaultId, params);
    }
    createVaultSecret(vaultId, params) {
        return this.vault.createVaultSecret(vaultId, params);
    }
    deleteVaultSecret(vaultId, secretId) {
        return this.vault.deleteVaultSecret(vaultId, secretId);
    }
}
exports.Provide = Provide;
//# sourceMappingURL=service.js.map