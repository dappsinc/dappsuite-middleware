import { Key, Secret, Vault as ProvideVault } from '@provide/types';
export declare class Vault {
    private static readonly DEFAULT_HOST;
    private readonly client;
    constructor(token: string, scheme?: string, host?: string, path?: string);
    static clientFactory(token: string, scheme?: string, host?: string, path?: string): Vault;
    createVault(params: object): Promise<ProvideVault>;
    fetchVaults(params: object): Promise<ProvideVault[]>;
    fetchVaultKeys(vaultId: string, params: object): Promise<Key[]>;
    createVaultKey(vaultId: string, params: object): Promise<Key>;
    deleteVaultKey(vaultId: string, keyId: string): Promise<Key>;
    encrypt(vaultId: string, keyId: string, msg: string): Promise<any>;
    decrypt(vaultId: string, keyId: string, msg: string): Promise<any>;
    signMessage(vaultId: string, keyId: string, msg: string): Promise<any>;
    verifySignature(vaultId: string, keyId: string, msg: string, sig: string): Promise<any>;
    fetchVaultSecrets(vaultId: string, params: object): Promise<Secret[]>;
    createVaultSecret(vaultId: string, params: object): Promise<Secret>;
    deleteVaultSecret(vaultId: string, secretId: string): Promise<Secret>;
}
export declare const vaultClientFactory: (token: string, scheme?: string | undefined, host?: string | undefined, path?: string | undefined) => Vault;
//# sourceMappingURL=vault.d.ts.map