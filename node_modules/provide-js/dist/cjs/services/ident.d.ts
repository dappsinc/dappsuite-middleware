import { Application, Invite, Key as VaultKey, Organization, Secret as VaultSecret, Token, User, Vault } from '@provide/types';
export declare class Ident {
    private static readonly DEFAULT_HOST;
    private readonly client;
    constructor(token: string, scheme?: string, host?: string, path?: string);
    static clientFactory(token: string, scheme?: string, host?: string, path?: string): Ident;
    private static unauthenticatedClientFactory;
    static authenticate(params: object, scheme?: string, host?: string, path?: string): Promise<any>;
    static createUser(params: object, scheme?: string, host?: string, path?: string): Promise<User>;
    static requestPasswordReset(email: string, scheme?: string, host?: string, path?: string): Promise<any>;
    static resetPassword(token: string, password: string, scheme?: string, host?: string, path?: string): Promise<any>;
    createApplication(params: object): Promise<Application>;
    updateApplication(appId: string, params: object): Promise<void>;
    fetchApplications(params: object): Promise<Application[]>;
    fetchApplicationDetails(appId: string): Promise<Application>;
    fetchApplicationOrganizations(appId: string, params: object): Promise<Organization[]>;
    createApplicationOrganization(appId: string, params: object): Promise<Organization>;
    updateApplicationOrganization(appId: string, organizationId: string, params: object): Promise<void>;
    deleteApplicationOrganization(appId: string, organizationId: string): Promise<Organization>;
    fetchApplicationInvitations(appId: string, params: object): Promise<Invite>;
    fetchApplicationTokens(appId: string): Promise<Token>;
    fetchApplicationUsers(appId: string, params: object): Promise<User[]>;
    createApplicationUser(appId: string, params: object): Promise<User>;
    updateApplicationUser(appId: string, userId: string, params: object): Promise<User>;
    deleteApplicationUser(appId: string, userId: string): Promise<void>;
    createOrganization(params: object): Promise<Organization>;
    fetchOrganizations(params: object): Promise<Organization[]>;
    fetchOrganizationDetails(organizationId: string): Promise<Organization>;
    updateOrganization(organizationId: string, params: object): Promise<void>;
    fetchOrganizationInvitations(organizationId: string, params: object): Promise<Invite>;
    fetchOrganizationUsers(organizationId: string, params: object): Promise<User[]>;
    createOrganizationUser(organizationId: string, params: object): Promise<User>;
    updateOrganizationUser(organizationId: string, userId: string, params: object): Promise<User>;
    deleteOrganizationUser(organizationId: string, userId: string): Promise<void>;
    fetchOrganizationVaults(organizationId: string, params: object): Promise<Vault[]>;
    fetchOrganizationVaultKeys(organizationId: string, vaultId: string, params: object): Promise<VaultKey[]>;
    createOrganizationVaultKey(organizationId: string, vaultId: string, params: object): Promise<VaultKey>;
    deleteOrganizationVaultKey(organizationId: string, vaultId: string, keyId: string): Promise<VaultKey[]>;
    organizationVaultKeySignMessage(organizationId: string, vaultId: string, keyId: string, msg: string): Promise<any>;
    organizationVaultKeyVerifySignature(organizationId: string, vaultId: string, keyId: string, msg: string, sig: string): Promise<any>;
    fetchOrganizationVaultSecrets(organizationId: string, vaultId: string, params: object): Promise<VaultSecret[]>;
    createOrganizationVaultSecret(organizationId: string, vaultId: string, params: object): Promise<VaultSecret>;
    deleteOrganizationVaultSecret(organizationId: string, vaultId: string, secretId: string): Promise<VaultSecret>;
    createToken(params: object): Promise<Token>;
    fetchTokens(params: object): Promise<Token[]>;
    fetchTokenDetails(tokenId: string): Promise<Token>;
    deleteToken(tokenId: string): Promise<void>;
    createInvitation(params: object): Promise<Invite>;
    createUser(params: object): Promise<User>;
    fetchUsers(): Promise<User[]>;
    fetchUserDetails(userId: string): Promise<User>;
    updateUser(userId: string, params: object): Promise<void>;
}
export declare const identClientFactory: (token: string, scheme?: string | undefined, host?: string | undefined, path?: string | undefined) => Ident;
//# sourceMappingURL=ident.d.ts.map