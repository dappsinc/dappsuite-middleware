"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Model {
    marshal() {
        const obj = {};
        for (const [key, value] of Object.entries(this)) {
            if (typeof value !== "undefined" && typeof value !== "function") {
                if (value instanceof Model) {
                    obj[toSnakeCase(key)] = JSON.parse(value.marshal());
                }
                else {
                    obj[toSnakeCase(key)] = value;
                }
            }
        }
        return JSON.stringify(obj);
    }
    unmarshal(json) {
        const obj = JSON.parse(json);
        for (const [key, value] of Object.entries(obj)) {
            this[toCamelCase(key)] = value;
        }
    }
}
exports.Model = Model;
function isObject(o) {
    return o === Object(o) && !Array.isArray(o) && typeof o !== "function";
}
function toCamelCase(str) {
    return str.replace(/([-_][a-z])/gi, $1 => {
        return $1
            .toUpperCase()
            .replace("-", "")
            .replace("_", "");
    });
}
function toSnakeCase(str) {
    return str.replace(/[A-Z]/g, $1 => {
        return `_${$1.toLowerCase()}`;
    });
}
function factory(clazz) {
    return new clazz();
}
exports.factory = factory;
function unmarshal(json, clazz) {
    const val = JSON.parse(json);
    if (val instanceof Array) {
        const arr = [];
        val.forEach((item) => {
            const inst = factory(clazz);
            inst.unmarshal(JSON.stringify(item));
            arr.push(inst);
        });
        return arr;
    }
    const instance = factory(clazz);
    instance.unmarshal(json);
    return instance;
}
exports.unmarshal = unmarshal;
//# sourceMappingURL=model.js.map