"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zokratesServiceFactory = exports.ZoKratesService = void 0;
const zokrates_js_1 = require("zokrates-js");
const fs_1 = require("fs");
const uuid_1 = require("uuid");
const defaultImportResolver = (location, path) => {
    let zokpath = `../../lib/circuits/${path}`;
    if (!zokpath.match(/\.zok$/i)) {
        zokpath = `${zokpath}.zok`;
    }
    return {
        source: fs_1.readFileSync(zokpath).toString(),
        location: path,
    };
};
class ZoKratesService {
    constructor(zokrates, importResolver) {
        this.zokrates = zokrates;
        this.importResolver = importResolver;
    }
    compile(source, location) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.zokrates.compile(source, location, this.importResolver);
        });
    }
    computeWitness(artifacts, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.zokrates.computeWitness(artifacts, args);
        });
    }
    exportVerifier(verifyingKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.zokrates.exportSolidityVerifier(verifyingKey, true);
        });
    }
    generateProof(circuit, witness, provingKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return JSON.parse(this.zokrates.generateProof(circuit, witness, provingKey));
        });
    }
    setup(circuit) {
        return __awaiter(this, void 0, void 0, function* () {
            const keypair = this.zokrates.setup(circuit);
            if (!keypair || !keypair.pk || !keypair.vk) {
                return Promise.reject('failed to perform trusted setup');
            }
            const artifact = {
                identifier: uuid_1.v4(),
                keypair: keypair,
                verifierSource: yield this.exportVerifier(keypair.vk),
            };
            if (!artifact.verifierSource) {
                return Promise.reject('failed to export verifier');
            }
            return artifact;
        });
    }
}
exports.ZoKratesService = ZoKratesService;
exports.zokratesServiceFactory = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const zokratesProvider = yield zokrates_js_1.initialize();
    return new ZoKratesService(zokratesProvider, (config === null || config === void 0 ? void 0 : config.importResolver) || defaultImportResolver);
});
//# sourceMappingURL=zokrates.js.map