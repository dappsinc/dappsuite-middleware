"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatsClientFacade = void 0;
const natsutil = __importStar(require("ts-natsutil"));
class NatsClientFacade {
    constructor(bearerToken, scheme = NatsClientFacade.DEFAULT_SCHEME, host = NatsClientFacade.DEFAULT_HOST, path) {
        this.bearerToken = bearerToken;
        this.natsUrl = `${scheme}://${host}/${path ? `${path}/` : ''}`;
    }
    connect() {
        const service = natsutil.natsServiceFactory({
            bearerToken: this.bearerToken,
            servers: [this.natsUrl],
        });
        return service.connect().then(() => {
            console.log(`NATS connection established to endpoint: ${this.natsUrl}`);
            this.service = service;
        });
    }
    close() {
        var _a;
        (_a = this.service) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    publish({ subject, payload, reply }) {
        var _a;
        if (!this.service) {
            return Promise.reject(`no NATS service available to publish message on subject: ${subject}`);
        }
        return (_a = this.service) === null || _a === void 0 ? void 0 : _a.publish(subject, payload, reply);
    }
    subscribe({ subject, onMessage }) {
        if (!this.service) {
            return Promise.reject(`no NATS service available to subscribe to subject: ${subject}`);
        }
        return this.service.subscribe(subject, onMessage);
    }
    unsubscribe(subject) {
        if (!this.service) {
            return;
        }
        this.service.unsubscribe(subject);
    }
    request({ subject, timeout, payload }) {
        if (!this.service) {
            return Promise.reject(`no NATS service available to send request on subject: ${subject}`);
        }
        return this.service.request(subject, timeout, payload);
    }
}
exports.NatsClientFacade = NatsClientFacade;
NatsClientFacade.DEFAULT_SCHEME = 'wss';
NatsClientFacade.DEFAULT_HOST = 'websocket.provide.services';
NatsClientFacade.DEFAULT_PATH = '';
//# sourceMappingURL=nats-client.js.map