import { RpcConfig } from './config';
import { IBaselineRPC, IBlockchainService, MerkleTreeNode, IRegistry, IVault } from '../..';
export declare class Rpc implements IBaselineRPC, IBlockchainService, IRegistry, IVault {
    private readonly config;
    private id;
    private readonly version;
    private readonly url;
    constructor(config: RpcConfig);
    private call;
    deploy(sender: string, bytecode: string, abi: any): Promise<any>;
    getLeaf(address: string, index: number): Promise<MerkleTreeNode>;
    getLeaves(address: string, indexes: number[]): Promise<MerkleTreeNode[]>;
    getRoot(address: string): Promise<string>;
    getSiblings(address: string, leafIndex: number): Promise<MerkleTreeNode[]>;
    getTracked(): Promise<string[]>;
    insertLeaf(sender: string, address: string, value: string): Promise<MerkleTreeNode>;
    insertLeaves(sender: string, address: string, value: string): Promise<MerkleTreeNode>;
    track(address: string): Promise<boolean>;
    verify(address: string, root: string, leaf: string, siblingPath: MerkleTreeNode[]): Promise<boolean>;
    broadcast(tx: string): Promise<any>;
    fetchTxReceipt(hash: string): Promise<any>;
    exec(method: string, params: any[]): Promise<any>;
    generateKeypair(): Promise<any>;
    rpcExec(method: string, params: any[]): Promise<any>;
    sign(params: any): Promise<any>;
    createWorkgroup(params: object): Promise<any>;
    updateWorkgroup(workgroupId: string, params: object): Promise<any>;
    fetchWorkgroups(params: object): Promise<any>;
    fetchWorkgroupDetails(workgroupId: string): Promise<any>;
    fetchWorkgroupOrganizations(workgroupId: string, params: object): Promise<any>;
    createWorkgroupOrganization(workgroupId: string, params: object): Promise<any>;
    updateWorkgroupOrganization(workgroupId: string, organizationId: string, params: object): Promise<any>;
    fetchWorkgroupInvitations(workgroupId: string, params: object): Promise<any>;
    fetchWorkgroupUsers(workgroupId: string, params: object): Promise<any>;
    createWorkgroupUser(workgroupId: string, params: object): Promise<any>;
    updateWorkgroupUser(workgroupId: string, userId: string, params: object): Promise<any>;
    deleteWorkgroupUser(workgroupId: string, userId: string): Promise<any>;
    createOrganization(params: object): Promise<any>;
    fetchOrganizations(params: object): Promise<any>;
    fetchOrganizationDetails(organizationId: string): Promise<any>;
    updateOrganization(organizationId: string, params: object): Promise<any>;
    fetchOrganizationInvitations(organizationId: string, params: object): Promise<any>;
    fetchOrganizationUsers(organizationId: string, params: object): Promise<any>;
    inviteOrganizationUser(organizationId: string, params: object): Promise<any>;
    createVault(params: object): Promise<any>;
    fetchVaults(params: object): Promise<any>;
    fetchVaultKeys(vaultId: string, params: object): Promise<any>;
    createVaultKey(vaultId: string, params: object): Promise<any>;
    deleteVaultKey(vaultId: string, keyId: string): Promise<any>;
    encrypt(vaultId: string, keyId: string, payload: string): Promise<any>;
    decrypt(vaultId: string, keyId: string, payload: string): Promise<any>;
    signMessage(vaultId: string, keyId: string, msg: string): Promise<any>;
    verifySignature(vaultId: string, keyId: string, msg: string, sig: string): Promise<any>;
    fetchVaultSecrets(vaultId: string, params: object): Promise<any>;
    createVaultSecret(vaultId: string, params: object): Promise<any>;
    deleteVaultSecret(vaultId: string, secretId: string): Promise<any>;
}
//# sourceMappingURL=service.d.ts.map