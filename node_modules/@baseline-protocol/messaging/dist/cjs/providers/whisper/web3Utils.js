"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWeb3 = exports.isWeb3Connected = void 0;
const web3_1 = __importDefault(require("web3"));
const winston_1 = __importDefault(require("winston"));
let web3client;
function isWeb3Connected() {
    return __awaiter(this, void 0, void 0, function* () {
        let connected = false;
        if (typeof web3client !== 'undefined') {
            connected = yield web3client.eth.net.isListening();
        }
        return connected;
    });
}
exports.isWeb3Connected = isWeb3Connected;
function getWeb3(clientUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof web3client === 'undefined') {
            winston_1.default.debug(`Creating initial Web3 connection to ${clientUrl}`);
            const newClient = yield new web3_1.default.providers.WebsocketProvider(clientUrl, { headers: { Origin: 'mychat2' } });
            web3client = yield new web3_1.default(newClient);
        }
        else if (yield isWeb3Connected()) {
            web3client = yield new web3_1.default(web3client.currentProvider);
        }
        else {
            winston_1.default.debug('Web3 connection missing. Will open a new one.', { service: 'MESSENGER' });
            const newClient = yield new web3_1.default.providers.WebsocketProvider(clientUrl, { headers: { Origin: 'mychat2' } });
            web3client = yield new web3_1.default(newClient);
        }
        return web3client;
    });
}
exports.getWeb3 = getWeb3;
//# sourceMappingURL=web3Utils.js.map