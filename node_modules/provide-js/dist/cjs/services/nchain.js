"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nchainClientFactory = exports.NChain = void 0;
const clients_1 = require("../clients");
class NChain {
    constructor(token, scheme, host, path) {
        if (!host) {
            host = NChain.DEFAULT_HOST;
        }
        this.client = new clients_1.ApiClient(token, scheme, host, path);
    }
    static clientFactory(token, scheme, host, path) {
        const _scheme = scheme ? scheme : (process.env['NCHAIN_API_SCHEME'] || 'https');
        const _host = host ? host : (process.env['NCHAIN_API_HOST'] || NChain.DEFAULT_HOST);
        const _path = path ? path : (process.env['NCHAIN_API_PATH'] || clients_1.ApiClient.DEFAULT_PATH);
        return new NChain(token, _scheme, _host, _path);
    }
    fetchAccounts(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('accounts', (params || {})));
        });
    }
    fetchAccountDetails(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`accounts/${accountId}`, {}));
        });
    }
    fetchAccountBalance(accountId, tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`accounts/${accountId}/balances/${tokenId}`, {}));
        });
    }
    createAccount(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('accounts', params));
        });
    }
    fetchBridges(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('bridges', (params || {})));
        });
    }
    fetchBridgeDetails(bridgeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`bridges/${bridgeId}`, {}));
        });
    }
    createBridge(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('bridges', params));
        });
    }
    fetchConnectors(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('connectors', (params || {})));
        });
    }
    fetchConnectorDetails(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`connectors/${connectorId}`, (params || {})));
        });
    }
    fetchConnectorLoadBalancers(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`connectors/${connectorId}/load_balancers`, (params || {})));
        });
    }
    fetchConnectorNodes(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`connectors/${connectorId}/nodes`, (params || {})));
        });
    }
    createConnector(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('connectors', params));
        });
    }
    deleteConnector(connectorId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`connectors/${connectorId}`));
        });
    }
    authorizeConnectorSubscription(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`connectors/${connectorId}/subscriptions`, params));
        });
    }
    authorizeContractSubscription(contractId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`contracts/${contractId}/subscriptions`, params));
        });
    }
    createConnectedEntity(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`connectors/${connectorId}/entities`, params));
        });
    }
    fetchConnectedEntities(connectorId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`connectors/${connectorId}/entities`, params));
        });
    }
    fetchConnectedEntityDetails(connectorId, entityId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`connectors/${connectorId}/entities/${entityId}`, (params || {})));
        });
    }
    updateConnectedEntity(connectorId, entityId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`connectors/${connectorId}/entities/${entityId}`, params));
        });
    }
    deleteConnectedEntity(connectorId, entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`connectors/${connectorId}/entities/${entityId}`));
        });
    }
    fetchContracts(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('contracts', (params || {})));
        });
    }
    fetchContractDetails(contractId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`contracts/${contractId}`, {}));
        });
    }
    createContract(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('contracts', params));
        });
    }
    executeContract(contractId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`contracts/${contractId}/execute`, params));
        });
    }
    fetchNetworks(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('networks', (params || {})));
        });
    }
    createNetwork(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('networks', params));
        });
    }
    updateNetwork(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`networks/${networkId}`, params));
        });
    }
    fetchNetworkDetails(networkId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}`, {}));
        });
    }
    fetchNetworkAccounts(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/accounts`, params));
        });
    }
    fetchNetworkBlocks(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/blocks`, params));
        });
    }
    fetchNetworkBridges(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/bridges`, params));
        });
    }
    fetchNetworkConnectors(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/connectors`, params));
        });
    }
    fetchNetworkContracts(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/contracts`, params));
        });
    }
    fetchNetworkContractDetails(networkId, contractId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/contracts/${contractId}`, {}));
        });
    }
    fetchNetworkOracles(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/oracles`, params));
        });
    }
    fetchNetworkTokens(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/tokens`, params));
        });
    }
    fetchNetworkTransactions(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/transactions`, params));
        });
    }
    fetchNetworkTransactionDetails(networkId, transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/transactions/${transactionId}`, {}));
        });
    }
    fetchNetworkStatus(networkId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/status`, {}));
        });
    }
    fetchNetworkNodes(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/nodes`, (params || {})));
        });
    }
    createNetworkNode(networkId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`networks/${networkId}/nodes`, params));
        });
    }
    fetchNetworkNodeDetails(networkId, nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/nodes/${nodeId}`, {}));
        });
    }
    fetchNetworkNodeLogs(networkId, nodeId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`networks/${networkId}/nodes/${nodeId}/logs`, (params || {})));
        });
    }
    deleteNetworkNode(networkId, nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`networks/${networkId}/nodes/${nodeId}`));
        });
    }
    fetchOracles(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('oracles', (params || {})));
        });
    }
    fetchOracleDetails(oracleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`oracles/${oracleId}`, {}));
        });
    }
    createOracle(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('oracles', params));
        });
    }
    fetchTokens(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('tokens', (params || {})));
        });
    }
    fetchTokenDetails(tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`tokens/${tokenId}`, {}));
        });
    }
    createToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('tokens', params));
        });
    }
    createTransaction(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('transactions', params));
        });
    }
    fetchTransactions(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('transactions', (params || {})));
        });
    }
    fetchTransactionDetails(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`transactions/${transactionId}`, {}));
        });
    }
    fetchWallets(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('wallets', (params || {})));
        });
    }
    fetchWalletAccounts(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`wallets/${walletId}/accounts`, {}));
        });
    }
    fetchWalletDetails(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`wallets/${walletId}`, {}));
        });
    }
    createWallet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('wallets', params));
        });
    }
}
exports.NChain = NChain;
NChain.DEFAULT_HOST = 'nchain.provide.services';
exports.nchainClientFactory = (token, scheme, host, path) => {
    return NChain.clientFactory(token, scheme, host, path);
};
//# sourceMappingURL=nchain.js.map