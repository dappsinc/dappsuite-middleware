"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageReservedBitsLength = 512;
var Opcode;
(function (Opcode) {
    Opcode["Baseline"] = "BLINE";
    Opcode["Join"] = "JOIN";
    Opcode["Ping"] = "PING";
    Opcode["Pong"] = "PONG";
    Opcode["Proof"] = "PROOF";
    Opcode["Verify"] = "VRFY";
})(Opcode = exports.Opcode || (exports.Opcode = {}));
var PayloadType;
(function (PayloadType) {
    PayloadType[PayloadType["Binary"] = 0] = "Binary";
    PayloadType[PayloadType["Text"] = 1] = "Text";
})(PayloadType = exports.PayloadType || (exports.PayloadType = {}));
exports.marshalProtocolMessage = (msg) => {
    const reservedBits = Buffer.alloc(exports.messageReservedBitsLength / 8);
    const buffer = Buffer.alloc(5 + 42 + 42 + 42 + 36 + 64 + 1 + reservedBits.length + msg.payload.length);
    buffer.write(msg.opcode);
    buffer.write(msg.sender, 5);
    buffer.write(msg.recipient, 5 + 42);
    buffer.write(msg.shield, 5 + 42 + 42);
    buffer.write(msg.identifier, 5 + 42 + 42 + 42);
    buffer.write(reservedBits.toString(), 5 + 42 + 42 + 42 + 36);
    buffer.write(msg.signature, 5 + 42 + 42 + 42 + 36 + reservedBits.length);
    buffer.write(msg.type.toString(), 5 + 42 + 42 + 42 + 36 + reservedBits.length + 64);
    const encoding = msg.type === PayloadType.Binary ? 'binary' : 'utf8';
    buffer.write(msg.payload.toString(encoding), 5 + 42 + 42 + 42 + 36 + reservedBits.length + 64 + 1);
    return buffer;
};
exports.unmarshalProtocolMessage = (msg) => {
    const reservedSize = exports.messageReservedBitsLength / 8;
    const type = msg.subarray(5 + 42 + 42 + 42 + 36 + 64 + reservedSize, 5 + 42 + 42 + 42 + 36 + 64 + 1 + reservedSize).toString();
    return {
        opcode: msg.subarray(0, 5).toString().replace(/\0/g, ''),
        sender: msg.subarray(5, 5 + 42).toString(),
        recipient: msg.subarray(5 + 42, 5 + 42 + 42).toString(),
        shield: msg.subarray(5 + 42 + 42, 5 + 42 + 42 + 42).toString(),
        identifier: msg.subarray(5 + 42 + 42 + 42, 5 + 42 + 42 + 42 + 36).toString(),
        signature: msg.subarray(5 + 42 + 42 + 42 + 36 + reservedSize, 5 + 42 + 42 + 42 + 36 + 64 + reservedSize).toString(),
        type: type === '0' ? PayloadType.Binary : (type === '1' ? PayloadType.Text : null),
        payload: msg.subarray(5 + 42 + 42 + 42 + 36 + 64 + reservedSize + 1),
    };
};
//# sourceMappingURL=protocol.js.map