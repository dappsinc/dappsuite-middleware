export declare const zkSnarkCircuitProviderServiceZokrates = "zokrates";
export interface IZKSnarkCircuitProvider {
    compile(source: string, location: string): Promise<IZKSnarkCompilationArtifacts>;
    computeWitness(artifacts: IZKSnarkCompilationArtifacts, args: any[]): Promise<IZKSnarkWitnessComputation>;
    exportVerifier(verifyingKey: any): Promise<any>;
    generateProof(circuit: any, witness: any, provingKey: any): Promise<any>;
    setup(circuit: any): Promise<IZKSnarkTrustedSetupArtifacts>;
}
export interface IZKSnarkCompilationArtifacts {
    program: Uint8Array;
    abi: string;
}
export declare type IZKSnarkTrustedSetupArtifacts = {
    identifier?: string;
    keypair?: IZKSnarkTrustedSetupKeypair;
    verifierSource?: string;
};
export declare type IZKSnarkTrustedSetupKeypair = {
    vk: string;
    pk: Uint8Array;
};
export declare type IZKSnarkWitnessComputation = {
    witness: string;
    output: string;
};
export declare function zkSnarkCircuitProviderServiceFactory(provider: string, config?: any): Promise<IZKSnarkCircuitProvider>;
//# sourceMappingURL=index.d.ts.map