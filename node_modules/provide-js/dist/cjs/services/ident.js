"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.identClientFactory = exports.Ident = void 0;
const clients_1 = require("../clients");
class Ident {
    constructor(token, scheme, host, path) {
        if (!host) {
            host = Ident.DEFAULT_HOST;
        }
        this.client = new clients_1.ApiClient(token, scheme, host, path);
    }
    static clientFactory(token, scheme, host, path) {
        const _scheme = scheme ? scheme : (process.env['IDENT_API_SCHEME'] || 'https');
        const _host = host ? host : (process.env['IDENT_API_HOST'] || Ident.DEFAULT_HOST);
        const _path = path ? path : (process.env['IDENT_API_PATH'] || clients_1.ApiClient.DEFAULT_PATH);
        return new Ident(token, _scheme, _host, _path);
    }
    static unauthenticatedClientFactory(token, scheme, host, path) {
        const _scheme = scheme ? scheme : (process.env['IDENT_API_SCHEME'] || 'https');
        const _host = host ? host : (process.env['IDENT_API_HOST'] || Ident.DEFAULT_HOST);
        const _path = path ? path : (process.env['IDENT_API_PATH'] || clients_1.ApiClient.DEFAULT_PATH);
        return new clients_1.ApiClient(token, _scheme, _host, _path);
    }
    static authenticate(params, scheme, host, path) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield Ident.unauthenticatedClientFactory(undefined, scheme, host, path).post('authenticate', params));
        });
    }
    static createUser(params, scheme, host, path) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield Ident.unauthenticatedClientFactory(undefined, scheme, host, path).post('users', params));
        });
    }
    static requestPasswordReset(email, scheme, host, path) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield Ident.unauthenticatedClientFactory(undefined, scheme, host, path).post('reset_password', { email }));
        });
    }
    static resetPassword(token, password, scheme, host, path) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield Ident.unauthenticatedClientFactory(undefined, scheme, host, path).post(`reset_password/${token}`, { password }));
        });
    }
    createApplication(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('applications', params));
        });
    }
    updateApplication(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`applications/${appId}`, params));
        });
    }
    fetchApplications(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('applications', params));
        });
    }
    fetchApplicationDetails(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`applications/${appId}`, {}));
        });
    }
    fetchApplicationOrganizations(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`applications/${appId}/organizations`, params));
        });
    }
    createApplicationOrganization(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`applications/${appId}/organizations`, params));
        });
    }
    updateApplicationOrganization(appId, organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`applications/${appId}/organizations/${organizationId}`, params));
        });
    }
    deleteApplicationOrganization(appId, organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`applications/${appId}/organizations/${organizationId}`));
        });
    }
    fetchApplicationInvitations(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`applications/${appId}/invitations`, params));
        });
    }
    fetchApplicationTokens(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`applications/${appId}/tokens`, {}));
        });
    }
    fetchApplicationUsers(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`applications/${appId}/users`, params));
        });
    }
    createApplicationUser(appId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`applications/${appId}/users`, params));
        });
    }
    updateApplicationUser(appId, userId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`applications/${appId}/users/${userId}`, params));
        });
    }
    deleteApplicationUser(appId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`applications/${appId}/users/${userId}`));
        });
    }
    createOrganization(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('organizations', params));
        });
    }
    fetchOrganizations(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('organizations', params));
        });
    }
    fetchOrganizationDetails(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}`, {}));
        });
    }
    updateOrganization(organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`organizations/${organizationId}`, params));
        });
    }
    fetchOrganizationInvitations(organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}/invitations`, params));
        });
    }
    fetchOrganizationUsers(organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}/users`, params));
        });
    }
    createOrganizationUser(organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`organizations/${organizationId}/users`, params));
        });
    }
    updateOrganizationUser(organizationId, userId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`organizations/${organizationId}/users/${userId}`, params));
        });
    }
    deleteOrganizationUser(organizationId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`organizations/${organizationId}/users/${userId}`));
        });
    }
    fetchOrganizationVaults(organizationId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}/vaults`, params));
        });
    }
    fetchOrganizationVaultKeys(organizationId, vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}/vaults/${vaultId}/keys`, params));
        });
    }
    createOrganizationVaultKey(organizationId, vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`organizations/${organizationId}/vaults/${vaultId}/keys`, params));
        });
    }
    deleteOrganizationVaultKey(organizationId, vaultId, keyId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`organizations/${organizationId}/vaults/${vaultId}/keys/${keyId}`));
        });
    }
    organizationVaultKeySignMessage(organizationId, vaultId, keyId, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`organizations/${organizationId}/vaults/${vaultId}/keys/${keyId}/sign`, { message: msg }));
        });
    }
    organizationVaultKeyVerifySignature(organizationId, vaultId, keyId, msg, sig) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`organizations/${organizationId}/vaults/${vaultId}/keys/${keyId}/verify`, { message: msg, signature: sig }));
        });
    }
    fetchOrganizationVaultSecrets(organizationId, vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`organizations/${organizationId}/vaults/${vaultId}/secrets`, params));
        });
    }
    createOrganizationVaultSecret(organizationId, vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`organizations/${organizationId}/vaults/${vaultId}/secrets`, params));
        });
    }
    deleteOrganizationVaultSecret(organizationId, vaultId, secretId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`organizations/${organizationId}/vaults/${vaultId}/secrets/${secretId}`));
        });
    }
    createToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('tokens', params));
        });
    }
    fetchTokens(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('tokens', params));
        });
    }
    fetchTokenDetails(tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`tokens/${tokenId}`, {}));
        });
    }
    deleteToken(tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`tokens/${tokenId}`));
        });
    }
    createInvitation(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('invitations', params));
        });
    }
    createUser(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('users', params));
        });
    }
    fetchUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('users', {}));
        });
    }
    fetchUserDetails(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`users/${userId}`, {}));
        });
    }
    updateUser(userId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.put(`users/${userId}`, params));
        });
    }
}
exports.Ident = Ident;
Ident.DEFAULT_HOST = 'ident.provide.services';
exports.identClientFactory = (token, scheme, host, path) => {
    return Ident.clientFactory(token, scheme, host, path);
};
//# sourceMappingURL=ident.js.map