"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ethers = void 0;
class Ethers {
    constructor(config) {
        this.config = config;
    }
    fetchTxReceipt(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
    generateKeypair() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
    broadcast(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
    rpcExec(method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
    sign(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
    createWorkgroup(params) {
        throw new Error('not implemented');
    }
    updateWorkgroup(workgroupId, params) {
        throw new Error('not implemented');
    }
    fetchWorkgroups(params) {
        throw new Error('not implemented');
    }
    fetchWorkgroupDetails(workgroupId) {
        throw new Error('not implemented');
    }
    fetchWorkgroupOrganizations(workgroupId, params) {
        throw new Error('not implemented');
    }
    createWorkgroupOrganization(workgroupId, params) {
        throw new Error('not implemented');
    }
    updateWorkgroupOrganization(workgroupId, organizationId, params) {
        throw new Error('not implemented');
    }
    fetchWorkgroupInvitations(workgroupId, params) {
        throw new Error('not implemented');
    }
    fetchWorkgroupTokens(workgroupId) {
        throw new Error('not implemented');
    }
    fetchWorkgroupUsers(workgroupId, params) {
        throw new Error('not implemented');
    }
    createWorkgroupUser(workgroupId, params) {
        throw new Error('not implemented');
    }
    updateWorkgroupUser(workgroupId, userId, params) {
        throw new Error('not implemented');
    }
    deleteWorkgroupUser(workgroupId, userId) {
        throw new Error('not implemented');
    }
    createOrganization(params) {
        throw new Error('not implemented');
    }
    fetchOrganizations(params) {
        throw new Error('not implemented');
    }
    fetchOrganizationDetails(organizationId) {
        throw new Error('not implemented');
    }
    updateOrganization(organizationId, params) {
        throw new Error('not implemented');
    }
    fetchOrganizationInvitations(organizationId, params) {
        throw new Error('not implemented');
    }
    fetchOrganizationUsers(organizationId, params) {
        throw new Error('not implemented');
    }
    inviteOrganizationUser(organizationId, params) {
        throw new Error('not implemented');
    }
    createVault(params) {
        throw new Error('not implemented');
    }
    fetchVaults(params) {
        throw new Error('not implemented');
    }
    fetchVaultKeys(vaultId, params) {
        throw new Error('not implemented');
    }
    createVaultKey(vaultId, params) {
        throw new Error('not implemented');
    }
    deleteVaultKey(vaultId, keyId) {
        throw new Error('not implemented');
    }
    encrypt(vaultId, keyId, payload) {
        throw new Error('not implemented');
    }
    decrypt(vaultId, keyId, payload) {
        throw new Error('not implemented');
    }
    signMessage(vaultId, keyId, msg) {
        throw new Error('not implemented');
    }
    verifySignature(vaultId, keyId, msg, sig) {
        throw new Error('not implemented');
    }
    fetchVaultSecrets(vaultId, params) {
        throw new Error('not implemented');
    }
    createVaultSecret(vaultId, params) {
        throw new Error('not implemented');
    }
    deleteVaultSecret(vaultId, secretId) {
        throw new Error('not implemented');
    }
}
exports.Ethers = Ethers;
//# sourceMappingURL=service.js.map