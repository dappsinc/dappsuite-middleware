"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
const types_1 = require("@provide/types");
class ApiClient {
    constructor(token, scheme = ApiClient.DEFAULT_SCHEME, host = ApiClient.DEFAULT_HOST, path = ApiClient.DEFAULT_PATH) {
        this.token = token;
        this.baseUrl = `${scheme}://${host}/${path}/`;
    }
    static handleResponse(resp) {
        var _a;
        if (['PATCH', 'UPDATE', 'DELETE'].indexOf((_a = resp.request) === null || _a === void 0 ? void 0 : _a.method) !== -1 || resp.headers['content-length'] === 0) {
            if (resp.status >= 400) {
                return Promise.reject(`failed with ${resp.status} status`);
            }
            return Promise.resolve();
        }
        try {
            if (resp.data instanceof Array) {
                const arr = [];
                resp.data.forEach((item) => {
                    const inst = new types_1.Model();
                    inst.unmarshal(JSON.stringify(item));
                    arr.push(inst);
                });
                return arr;
            }
            const instance = new types_1.Model();
            const json = JSON.stringify(resp.data);
            instance.unmarshal(json);
            return instance;
        }
        catch (err) {
            return Promise.reject('failed to parse response as JSON');
        }
    }
    static toQuery(params) {
        const paramList = [];
        for (const p in params) {
            if (params.hasOwnProperty(p)) {
                const param = params[p];
                if (param instanceof Array) {
                    for (const i in param) {
                        paramList.push(encodeURIComponent(p) + '=' + encodeURIComponent(param[i]));
                    }
                }
                else {
                    paramList.push(encodeURIComponent(p) + '=' + encodeURIComponent(params[p]));
                }
            }
        }
        if (paramList.length > 0) {
            return paramList.join('&');
        }
        return '';
    }
    get(uri, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest('GET', uri, params);
        });
    }
    patch(uri, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest('PATCH', uri, params);
        });
    }
    post(uri, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest('POST', uri, params);
        });
    }
    put(uri, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest('PUT', uri, params);
        });
    }
    delete(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest('DELETE', uri, null);
        });
    }
    sendRequest(method, uri, params = null) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = '';
            let requestBody;
            if (params === null) {
                requestBody = undefined;
            }
            else if (method === 'GET' && Object.keys(params).length > 0) {
                query = `?${ApiClient.toQuery(params)}`;
            }
            else {
                requestBody = JSON.stringify(params);
            }
            const requestHeaders = {};
            if (this.token) {
                requestHeaders['Authorization'] = `bearer ${this.token}`;
            }
            if (['POST', 'PUT'].indexOf(method) !== -1) {
                requestHeaders['Content-Type'] = 'application/json';
            }
            const cfg = {
                url: this.baseUrl + uri + query,
                method: method,
                headers: requestHeaders,
                data: null,
            };
            if (['POST', 'PUT'].indexOf(method) !== -1) {
                cfg.data = requestBody;
            }
            try {
                return axios_1.default.request(cfg);
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
}
exports.ApiClient = ApiClient;
ApiClient.DEFAULT_SCHEME = 'https';
ApiClient.DEFAULT_HOST = 'provide.services';
ApiClient.DEFAULT_PATH = 'api/v1';
//# sourceMappingURL=api-client.js.map