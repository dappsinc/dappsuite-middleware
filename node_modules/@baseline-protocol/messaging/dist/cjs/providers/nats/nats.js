"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatsService = void 0;
const ts_natsutil_1 = require("ts-natsutil");
class NatsService {
    constructor(config, getBearerToken) {
        this.config = config;
        this.getBearerToken = getBearerToken;
        this.bearerToken = null;
    }
    getSubscribedSubjects() {
        throw new Error('Method not implemented.');
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bearerToken && this.getBearerToken) {
                this.bearerToken = yield this.getBearerToken();
            }
            const servers = this.config.servers;
            const service = ts_natsutil_1.natsServiceFactory({
                bearerToken: this.bearerToken,
                natsServers: typeof servers === `string` ? [servers] : servers,
            });
            const natsConnection = yield service.connect();
            this.service = service;
            const self = this;
            if (typeof natsConnection.addEventListener === 'function') {
                natsConnection.addEventListener('close', () => __awaiter(this, void 0, void 0, function* () {
                    this.bearerToken = null;
                    yield self.connect();
                }));
            }
            else {
                natsConnection.on('close', () => __awaiter(this, void 0, void 0, function* () {
                    this.bearerToken = null;
                    yield self.connect();
                }));
            }
        });
    }
    disconnect() {
        var _a;
        if ((_a = this.service) === null || _a === void 0 ? void 0 : _a.isConnected()) {
            this.service.disconnect();
            this.service = null;
        }
        return Promise.resolve();
    }
    isConnected() {
        return this.service !== null;
    }
    publish(subject, data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.service.publish(subject, data);
        });
    }
    request(subject, timeout, data = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.service.request(subject, timeout, data);
            return response;
        });
    }
    subscribe(subject, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.service.subscribe(subject, (msg, err) => {
                callback(msg, err);
            });
        });
    }
    unsubscribe(subject) {
        return __awaiter(this, void 0, void 0, function* () {
            const unsubscribeFrom = this.getSubjectsToUnsubscribeFrom(subject);
            unsubscribeFrom.forEach(sub => {
                this.service.unsubscribe(sub);
            });
        });
    }
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.service.flush();
        });
    }
    getSubjectsToUnsubscribeFrom(subject) {
        const subscribedTo = this.service.getSubscribedSubjects();
        const unsubscribeFrom = [];
        const substrsToMatch = subject.split(`>`)[0].split(`*`);
        subscribedTo.forEach(subscribedSubject => {
            let subjectIncludesAllSubstrings = true;
            substrsToMatch.forEach(match => {
                if (!subscribedSubject.includes(match) && match !== ``) {
                    subjectIncludesAllSubstrings = false;
                }
            });
            if (subjectIncludesAllSubstrings) {
                unsubscribeFrom.push(subscribedSubject);
            }
        });
        return unsubscribeFrom;
    }
}
exports.NatsService = NatsService;
//# sourceMappingURL=nats.js.map