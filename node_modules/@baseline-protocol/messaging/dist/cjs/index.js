"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messagingServiceFactory = exports.messagingProviderWhisper = exports.messagingProviderNats = exports.messagePayloadTypeBinary = exports.messagePayloadTypeJson = void 0;
const nats_1 = require("./providers/nats");
const whisper_1 = require("./providers/whisper");
exports.messagePayloadTypeJson = 'json';
exports.messagePayloadTypeBinary = 'binary';
exports.messagingProviderNats = 'nats';
exports.messagingProviderWhisper = 'whisper';
function messagingServiceFactory(provider, config) {
    return __awaiter(this, void 0, void 0, function* () {
        let service;
        switch (provider) {
            case exports.messagingProviderWhisper:
                service = yield new whisper_1.WhisperService(config);
                break;
            case exports.messagingProviderNats:
                service = yield nats_1.natsServiceFactory(config);
                break;
            default:
                throw new Error('messaging service provider required');
        }
        return service;
    });
}
exports.messagingServiceFactory = messagingServiceFactory;
//# sourceMappingURL=index.js.map