"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.capabilitiesFactory = exports.Capabilities = void 0;
const axios_1 = __importDefault(require("axios"));
class Capabilities {
    constructor(manifestUrl) {
        this.manifestUrl = manifestUrl || Capabilities.capabilitiesManifestUrl;
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            return axios_1.default.get(this.manifestUrl).then((response) => {
                if (response.status === 200) {
                    this.capabilities = response.data;
                }
            });
        });
    }
    getBaselineRegistryContracts() {
        var _a;
        if (this.capabilities) {
            return (_a = this.capabilities.baseline) === null || _a === void 0 ? void 0 : _a.contracts;
        }
        return undefined;
    }
    getRegistryContracts() {
        var _a;
        if (this.capabilities) {
            return (_a = this.capabilities.message_bus) === null || _a === void 0 ? void 0 : _a.registry_contracts;
        }
        return undefined;
    }
}
exports.Capabilities = Capabilities;
Capabilities.capabilitiesManifestUrl = 'https://s3.amazonaws.com/static.provide.services/capabilities/provide-capabilities-manifest.json';
exports.capabilitiesFactory = () => {
    const capabilities = new Capabilities();
    capabilities.fetch();
    return capabilities;
};
//# sourceMappingURL=capabilities.js.map