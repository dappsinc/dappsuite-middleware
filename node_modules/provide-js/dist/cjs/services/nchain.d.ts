import { ApiClientResponse } from '../clients';
export declare class NChain {
    private static readonly DEFAULT_HOST;
    private readonly client;
    constructor(token: string, scheme?: string, host?: string, path?: string);
    static clientFactory(token: string, scheme?: string, host?: string, path?: string): NChain;
    fetchAccounts(params?: object): Promise<ApiClientResponse>;
    fetchAccountDetails(accountId: string): Promise<ApiClientResponse>;
    fetchAccountBalance(accountId: string, tokenId: string): Promise<ApiClientResponse>;
    createAccount(params: object): Promise<ApiClientResponse>;
    fetchBridges(params?: object): Promise<ApiClientResponse>;
    fetchBridgeDetails(bridgeId: string): Promise<ApiClientResponse>;
    createBridge(params: object): Promise<ApiClientResponse>;
    fetchConnectors(params?: object): Promise<ApiClientResponse>;
    fetchConnectorDetails(connectorId: string, params?: object): Promise<ApiClientResponse>;
    fetchConnectorLoadBalancers(connectorId: string, params?: object): Promise<ApiClientResponse>;
    fetchConnectorNodes(connectorId: string, params?: object): Promise<ApiClientResponse>;
    createConnector(params: object): Promise<ApiClientResponse>;
    deleteConnector(connectorId: string): Promise<ApiClientResponse>;
    authorizeConnectorSubscription(connectorId: string, params: object): Promise<ApiClientResponse>;
    authorizeContractSubscription(contractId: string, params: object): Promise<ApiClientResponse>;
    createConnectedEntity(connectorId: string, params: object): Promise<ApiClientResponse>;
    fetchConnectedEntities(connectorId: string, params: object): Promise<ApiClientResponse>;
    fetchConnectedEntityDetails(connectorId: string, entityId: string, params?: object): Promise<ApiClientResponse>;
    updateConnectedEntity(connectorId: string, entityId: string, params: object): Promise<ApiClientResponse>;
    deleteConnectedEntity(connectorId: string, entityId: string): Promise<ApiClientResponse>;
    fetchContracts(params?: object): Promise<ApiClientResponse>;
    fetchContractDetails(contractId: string): Promise<ApiClientResponse>;
    createContract(params: object): Promise<ApiClientResponse>;
    executeContract(contractId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworks(params?: object): Promise<ApiClientResponse>;
    createNetwork(params: object): Promise<ApiClientResponse>;
    updateNetwork(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkDetails(networkId: string): Promise<ApiClientResponse>;
    fetchNetworkAccounts(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkBlocks(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkBridges(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkConnectors(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkContracts(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkContractDetails(networkId: string, contractId: string): Promise<ApiClientResponse>;
    fetchNetworkOracles(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkTokens(networkId: string, params: object): Promise<ApiClientResponse>;
    network_transactions(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkTransactionDetails(networkId: string, transactionId: string): Promise<ApiClientResponse>;
    fetchNetworkStatus(networkId: string): Promise<ApiClientResponse>;
    fetchNetworkNodes(networkId: string, params?: object): Promise<ApiClientResponse>;
    createNetworkNode(networkId: string, params: object): Promise<ApiClientResponse>;
    fetchNetworkNodeDetails(networkId: string, nodeId: string): Promise<ApiClientResponse>;
    fetchNetworkNodeLogs(networkId: string, nodeId: string, params?: object): Promise<ApiClientResponse>;
    deleteNetworkNode(networkId: string, nodeId: string): Promise<ApiClientResponse>;
    fetchOracles(params?: object): Promise<ApiClientResponse>;
    fetchOracleDetails(oracleId: string): Promise<ApiClientResponse>;
    createOracle(params: object): Promise<ApiClientResponse>;
    fetchTokens(params?: object): Promise<ApiClientResponse>;
    fetchTokenDetails(tokenId: string): Promise<ApiClientResponse>;
    createToken(params: object): Promise<ApiClientResponse>;
    createTransaction(params: object): Promise<ApiClientResponse>;
    fetchTransactions(params?: object): Promise<ApiClientResponse>;
    fetchTransactionDetails(transactionId: string): Promise<ApiClientResponse>;
    fetchWallets(params?: object): Promise<ApiClientResponse>;
    fetchWalletAccounts(walletId: string): Promise<ApiClientResponse>;
    fetchWalletDetails(walletId: string): Promise<ApiClientResponse>;
    createWallet(params: object): Promise<ApiClientResponse>;
}
export declare const nchainClientFactory: (token: string, scheme?: string | undefined, host?: string | undefined, path?: string | undefined) => NChain;
//# sourceMappingURL=nchain.d.ts.map