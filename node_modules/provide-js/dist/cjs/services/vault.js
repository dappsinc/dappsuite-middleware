"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vaultClientFactory = exports.Vault = void 0;
const clients_1 = require("../clients");
class Vault {
    constructor(token, scheme, host, path) {
        if (!host) {
            host = Vault.DEFAULT_HOST;
        }
        this.client = new clients_1.ApiClient(token, scheme, host, path);
    }
    static clientFactory(token, scheme, host, path) {
        const _scheme = scheme ? scheme : (process.env['VAULT_API_SCHEME'] || 'https');
        const _host = host ? host : (process.env['VAULT_API_HOST'] || Vault.DEFAULT_HOST);
        const _path = path ? path : (process.env['VAULT_API_PATH'] || clients_1.ApiClient.DEFAULT_PATH);
        return new Vault(token, _scheme, _host, _path);
    }
    createVault(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post('vaults', params));
        });
    }
    fetchVaults(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get('vaults', params));
        });
    }
    fetchVaultKeys(vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`vaults/${vaultId}/keys`, params));
        });
    }
    createVaultKey(vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/keys`, params));
        });
    }
    deleteVaultKey(vaultId, keyId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`vaults/${vaultId}/keys/${keyId}`));
        });
    }
    encrypt(vaultId, keyId, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/keys/${keyId}/encrypt`, { message: msg }));
        });
    }
    decrypt(vaultId, keyId, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/keys/${keyId}/decrypt`, { message: msg }));
        });
    }
    signMessage(vaultId, keyId, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/keys/${keyId}/sign`, { message: msg }));
        });
    }
    verifySignature(vaultId, keyId, msg, sig) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/keys/${keyId}/verify`, { message: msg, signature: sig }));
        });
    }
    fetchVaultSecrets(vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.get(`vaults/${vaultId}/secrets`, params));
        });
    }
    createVaultSecret(vaultId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.post(`vaults/${vaultId}/secrets`, params));
        });
    }
    deleteVaultSecret(vaultId, secretId) {
        return __awaiter(this, void 0, void 0, function* () {
            return clients_1.ApiClient.handleResponse(yield this.client.delete(`vaults/${vaultId}/secrets/${secretId}`));
        });
    }
}
exports.Vault = Vault;
Vault.DEFAULT_HOST = 'vault.provide.services';
exports.vaultClientFactory = (token, scheme, host, path) => {
    return Vault.clientFactory(token, scheme, host, path);
};
//# sourceMappingURL=vault.js.map